{
  "_from": "stringify-object",
  "_id": "stringify-object@3.2.1",
  "_inBundle": false,
  "_integrity": "sha512-jPcQYw/52HUPP8uOE4kkjxl5bB9LfHkKCTptIk3qw7ozP5XMIMlHMLjt00GGSwW6DJAf/njY5EU6Vpwl4LlBKQ==",
  "_location": "/stringify-object",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "stringify-object",
    "fetchSpec": "latest",
    "name": "stringify-object",
    "raw": "stringify-object",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/stringify-object/-/stringify-object-3.2.1.tgz",
  "_shasum": "2720c2eff940854c819f6ee252aaeb581f30624d",
  "_shrinkwrap": null,
  "_spec": "stringify-object",
  "_where": "/home/protected/niceknife",
  "author": {
    "email": "sindresorhus@gmail.com",
    "name": "Sindre Sorhus",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/yeoman/stringify-object/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "get-own-enumerable-property-symbols": "^2.0.1",
    "is-obj": "^1.0.1",
    "is-regexp": "^1.0.0"
  },
  "deprecated": false,
  "description": "Stringify an object/array like JSON.stringify just without all the double-quotes",
  "devDependencies": {
    "ava": "*",
    "xo": "*"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/yeoman/stringify-object#readme",
  "keywords": [
    "object",
    "stringify",
    "pretty",
    "print",
    "dump",
    "format",
    "type",
    "json"
  ],
  "license": "BSD-2-Clause",
  "name": "stringify-object",
  "optionalDependencies": {},
  "readme": "# stringify-object [![Build Status](https://secure.travis-ci.org/yeoman/stringify-object.svg?branch=master)](http://travis-ci.org/yeoman/stringify-object)\n\n> Stringify an object/array like JSON.stringify just without all the double-quotes\n\nUseful for when you want to get the string representation of an object in a formatted way.\n\nIt also handles circular references and lets you specify quote type.\n\n\n## Install\n\n```\n$ npm install stringify-object\n```\n\n\n## Usage\n\n```js\nconst stringifyObject = require('stringify-object');\n\nconst obj = {\n\tfoo: 'bar',\n\t'arr': [1, 2, 3],\n\tnested: { hello: \"world\" }\n};\n\nconst pretty = stringifyObject(obj, {\n\tindent: '  ',\n\tsingleQuotes: false\n});\n\nconsole.log(pretty);\n/*\n{\n\tfoo: \"bar\",\n\tarr: [\n\t\t1,\n\t\t2,\n\t\t3\n\t],\n\tnested: {\n\t\thello: \"world\"\n\t}\n}\n*/\n```\n\n\n## API\n\n### stringifyObject(input, [options])\n\nCircular references will be replaced with `\"[Circular]\"`.\n\n#### input\n\nType: `Object` `Array`\n\n#### options\n\n##### indent\n\nType: `string`<br>\nDefault: `\\t`\n\nPreferred indentation.\n\n##### singleQuotes\n\nType: `boolean`<br>\nDefault: `true`\n\nSet to false to get double-quoted strings.\n\n##### filter(obj, prop)\n\nType: `Function`\n\nExpected to return a `boolean` of whether to include the property `prop` of the object `obj` in the output.\n\n##### transform(obj, prop, originalResult)\n\nType: `Function`<br>\nDefault: `undefined`\n\nExpected to return a `string` that transforms the string that resulted from stringifying `obj[prop]`. This can be used to detect special types of objects that need to be stringified in a particular way. The `transform` function might return an alternate string in this case, otherwise returning the `originalResult`.\n\nHere's an example that uses the `transform` option to mask fields named \"password\":\n\n```js\nconst obj = {\n\tuser: 'becky',\n\tpassword: 'secret'\n}\n\nconst pretty = stringifyObject(obj, {\n\ttransform: (obj, prop, originalResult) => {\n\t\tif (prop === 'password') {\n\t\t\treturn originalResult.replace(/\\w/g, '*');\n\t\t} else {\n\t\t\treturn originalResult;\n\t\t}\n\t}\n});\n\nconsole.log(pretty);\n/*\n{\n\tuser: 'becky',\n\tpassword: '******'\n}\n*/\n```\n\n\n##### inlineCharacterLimit\n\nType: `number`\n\nWhen set, will inline values up to `inlineCharacterLimit` length for the sake of more terse output.\n\nFor example, given the example at the top of the README:\n\n```js\nconst obj = {\n\tfoo: 'bar',\n\t'arr': [1, 2, 3],\n\tnested: { hello: \"world\" }\n};\n\nconst pretty = stringifyObject(obj, {\n\tindent: '  ',\n\tsingleQuotes: false,\n\tinlineCharacterLimit: 12\n});\n\nconsole.log(pretty);\n/*\n{\n\tfoo: \"bar\",\n\tarr: [1, 2, 3],\n\tnested: {\n\t\thello: \"world\"\n\t}\n}\n*/\n```\n\nAs you can see, `arr` was printed as a one-liner because its string was shorter than 12 characters.\n\n\n## License\n\n[BSD license](http://opensource.org/licenses/bsd-license.php) Â© Yeoman Team\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yeoman/stringify-object.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "3.2.1"
}
